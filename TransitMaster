#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_LEDBackpack.h>
#include <Keypad.h>
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'0', 'F', 'E', 'D'}
};
int dis = 0;
char scroll[4] = {' ', ' ', ' ', ' '};
int8_t dexterst[16] = {'D', 'E', 'X', 'T', 'E', 'R', ' ', 'S', 'T', 'R', 'E', 'E', 'T', ' ', ' ', ' '};
int8_t hicksave[15] = {'H', 'I', 'C', 'K', 'S', ' ', 'A', 'V', 'E', 'N', 'U', 'E', ' ', ' ', ' '};
int8_t medfordst[31] = {'M', 'E', 'D', 'F', 'O', 'R', 'D', ' ', 'S', 'T', 'E', 'E', 'T', ' ', '-', ' ', 'T', 'U', 'F', 'T', 'S', ' ', 'S', 'Q', 'U', 'A', 'R', 'E', ' ', ' ', ' '};
int8_t mayberryave[18] = {'M', 'A', 'Y', 'B', 'E', 'R', 'R', 'Y', ' ', 'A', 'V', 'E', 'N', 'U', 'E', ' ', ' ', ' '};
int8_t harvardst[17] = {'H', 'A', 'R', 'V', 'A', 'R', 'D', ' ', 'S', 'T', 'R', 'E', 'E', 'T', ' ', ' ', ' '};
int8_t bowenave[15] = {'B', 'O', 'W', 'E', 'N', ' ', 'A', 'V', 'E', 'N', 'U', 'E', ' ', ' ', ' '};
int8_t hancockst[17] = {'H', 'A', 'N', 'C', 'O', 'C', 'K', ' ', 'S', 'T', 'R', 'E', 'E', 'T', ' ', ' ', ' '};
int8_t hancockave[17] = {'H', 'A', 'N', 'C', 'O', 'C', 'K', ' ', 'A', 'V', 'E', 'N', 'U', 'E', ' ', ' ', ' '};
int8_t georgest[47] = {'G', 'E', 'O', 'R', 'G', 'E', ' ', 'S', 'T', 'R', 'E', 'E', 'T', ' ', '-', ' ', 'B', 'R', 'O', 'O', 'K', 'S', ' ', 'P', 'A', 'R', 'K', ' ', '-', ' ', 'B', 'U', 'S', ' ', 'C', 'O', 'N', 'N', 'E', 'C', 'T', 'I', 'O', 'N', ' ', ' ', ' '};
int8_t mainst[31] = {'G', 'E', 'O', 'R', 'G', 'E', ' ', 'S', 'T', 'R', 'E', 'E', 'T', ' ', 'A' , 'T', ' ', 'M', 'A', 'I', 'N', ' ', 'S', 'T', 'R', 'E', 'E', 'T', ' ', ' ', ' '};
int8_t wedgemererd[17] = {'W', 'E', 'D', 'G', 'E', 'M', 'E', 'R', 'E', ' ', 'R', 'O', 'A', 'D', ' ', ' ', ' '};
int8_t marstonst[17] = {'M', 'A', 'R', 'S', 'T', 'O', 'N', ' ', 'S', 'T', 'R', 'E', 'E', 'T', ' ', ' ', ' '};
int8_t winthropst[18] = {'W', 'I', 'N', 'T', 'H', 'R', 'O', 'P', ' ', 'S', 'T', 'R', 'E', 'E', 'T', ' ', ' ', ' '};
int8_t winthrop[22] = {'3', '0', '5', ' ', 'W', 'I', 'N', 'T', 'H', 'R', 'O', 'P', ' ', 'S', 'T', 'R', 'E', 'E', 'T', ' ', ' ', ' '};
int8_t lawrencerd[16] = {'L', 'A', 'W', 'R', 'E', 'N', 'C', 'E', ' ', 'R', 'O', 'A', 'D', ' ', ' ', ' '};
int8_t woodsiderd[16] = {'W', 'O', 'O', 'D', 'S', 'I', 'D', 'E', ' ', 'R', 'O', 'A', 'D', ' ', ' ', ' '};
byte rowPins[ROWS] = {5, 4, 3, 2};
byte colPins[COLS] = {9, 8, 7, 6};
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );
Adafruit_AlphaNum4 alpha4 = Adafruit_AlphaNum4();
void setup() {
  pinMode(1, OUTPUT);
  digitalWrite(1, HIGH);
  tone(1, 600, 100);
  Serial.begin(9600);
  alpha4.begin(0x70);
  alpha4.clear();
  alpha4.writeDisplay();
}

void loop() {
  char key = keypad.getKey();
  if (key) {
    if (key == '1') {
      tone(1, 600, 100);
      alpha4.clear();
      alpha4.writeDisplay();
      dis = 0;
      for (int a = 0; a <= 15; a++) {
        scroll[0] = scroll[1];
        scroll[1] = scroll[2];
        scroll[2] = scroll[3];
        scroll[3] = dexterst[dis];
        alpha4.writeDigitAscii(3, scroll[3]);
        alpha4.writeDigitAscii(2, scroll[2]);
        alpha4.writeDigitAscii(1, scroll[1]);
        alpha4.writeDigitAscii(0, scroll[0]);
        alpha4.writeDisplay();
        dis++;
        if (a == 15) {
          delay(200);
          alpha4.clear();
          alpha4.writeDisplay();
        }
        delay(200);
      }
    }
    if (key == '2') {
      alpha4.clear();
      alpha4.writeDisplay();
      tone(1, 600, 100);
      dis = 0;
      for (int b = 0; b <= 14; b++) {
        scroll[0] = scroll[1];
        scroll[1] = scroll[2];
        scroll[2] = scroll[3];
        scroll[3] = hicksave[dis];
        alpha4.writeDigitAscii(3, scroll[3]);
        alpha4.writeDigitAscii(2, scroll[2]);
        alpha4.writeDigitAscii(1, scroll[1]);
        alpha4.writeDigitAscii(0, scroll[0]);
        alpha4.writeDisplay();
        dis++;
        if (b == 14) {
          delay(200);
          alpha4.clear();
          alpha4.writeDisplay();
        }
        delay(200);
      }
    }
    if (key == '3') {
      alpha4.clear();
      alpha4.writeDisplay();
      tone(1, 600, 100);
      dis = 0;
      for (int c = 0; c <= 30; c++) {
        scroll[0] = scroll[1];
        scroll[1] = scroll[2];
        scroll[2] = scroll[3];
        scroll[3] = medfordst[dis];
        alpha4.writeDigitAscii(3, scroll[3]);
        alpha4.writeDigitAscii(2, scroll[2]);
        alpha4.writeDigitAscii(1, scroll[1]);
        alpha4.writeDigitAscii(0, scroll[0]);
        alpha4.writeDisplay();
        dis++;
        if (c == 30) {
          delay(200);
          alpha4.clear();
          alpha4.writeDisplay();
        }
        delay(200);
      }
    }
    if (key == 'A') {
      alpha4.clear();
      alpha4.writeDisplay();
      tone(1, 600, 100);
      dis = 0;
      for (int c = 0; c <= 17; c++) {
        scroll[0] = scroll[1];
        scroll[1] = scroll[2];
        scroll[2] = scroll[3];
        scroll[3] = mayberryave[dis];
        alpha4.writeDigitAscii(3, scroll[3]);
        alpha4.writeDigitAscii(2, scroll[2]);
        alpha4.writeDigitAscii(1, scroll[1]);
        alpha4.writeDigitAscii(0, scroll[0]);
        alpha4.writeDisplay();
        dis++;
        if (c == 17) {
          delay(200);
          alpha4.clear();
          alpha4.writeDisplay();
        }
        delay(200);
      }
    }
    if (key == '4') {
      alpha4.clear();
      alpha4.writeDisplay();
      tone(1, 600, 100);
      dis = 0;
      for (int c = 0; c <= 16; c++) {
        scroll[0] = scroll[1];
        scroll[1] = scroll[2];
        scroll[2] = scroll[3];
        scroll[3] = harvardst[dis];
        alpha4.writeDigitAscii(3, scroll[3]);
        alpha4.writeDigitAscii(2, scroll[2]);
        alpha4.writeDigitAscii(1, scroll[1]);
        alpha4.writeDigitAscii(0, scroll[0]);
        alpha4.writeDisplay();
        dis++;
        if (c == 16) {
          delay(200);
          alpha4.clear();
          alpha4.writeDisplay();
        }
        delay(200);
      }
    }
    if (key == '5') {
      alpha4.clear();
      alpha4.writeDisplay();
      tone(1, 600, 100);
      dis = 0;
      for (int c = 0; c <= 14; c++) {
        scroll[0] = scroll[1];
        scroll[1] = scroll[2];
        scroll[2] = scroll[3];
        scroll[3] = bowenave[dis];
        alpha4.writeDigitAscii(3, scroll[3]);
        alpha4.writeDigitAscii(2, scroll[2]);
        alpha4.writeDigitAscii(1, scroll[1]);
        alpha4.writeDigitAscii(0, scroll[0]);
        alpha4.writeDisplay();
        dis++;
        if (c == 14) {
          delay(200);
          alpha4.clear();
          alpha4.writeDisplay();
        }
        delay(200);
      }
    }
    if (key == '6') {
      alpha4.clear();
      alpha4.writeDisplay();
      tone(1, 600, 100);
      dis = 0;
      for (int c = 0; c <= 16; c++) {
        scroll[0] = scroll[1];
        scroll[1] = scroll[2];
        scroll[2] = scroll[3];
        scroll[3] = hancockst[dis];
        alpha4.writeDigitAscii(3, scroll[3]);
        alpha4.writeDigitAscii(2, scroll[2]);
        alpha4.writeDigitAscii(1, scroll[1]);
        alpha4.writeDigitAscii(0, scroll[0]);
        alpha4.writeDisplay();
        dis++;
        if (c == 16) {
          delay(200);
          alpha4.clear();
          alpha4.writeDisplay();
        }
        delay(200);
      }
    }
    if (key == 'B') {
      alpha4.clear();
      alpha4.writeDisplay();
      tone(1, 600, 100);
      dis = 0;
      for (int c = 0; c <= 16; c++) {
        scroll[0] = scroll[1];
        scroll[1] = scroll[2];
        scroll[2] = scroll[3];
        scroll[3] = hancockave[dis];
        alpha4.writeDigitAscii(3, scroll[3]);
        alpha4.writeDigitAscii(2, scroll[2]);
        alpha4.writeDigitAscii(1, scroll[1]);
        alpha4.writeDigitAscii(0, scroll[0]);
        alpha4.writeDisplay();
        dis++;
        if (c == 16) {
          delay(200);
          alpha4.clear();
          alpha4.writeDisplay();
        }
        delay(200);
      }
    }
    if (key == '7') {
      alpha4.clear();
      alpha4.writeDisplay();
      tone(1, 600, 100);
      dis = 0;
      for (int c = 0; c <= 46; c++) {
        scroll[0] = scroll[1];
        scroll[1] = scroll[2];
        scroll[2] = scroll[3];
        scroll[3] = georgest[dis];
        alpha4.writeDigitAscii(3, scroll[3]);
        alpha4.writeDigitAscii(2, scroll[2]);
        alpha4.writeDigitAscii(1, scroll[1]);
        alpha4.writeDigitAscii(0, scroll[0]);
        alpha4.writeDisplay();
        dis++;
        if (c == 46) {
          delay(200);
          alpha4.clear();
          alpha4.writeDisplay();
        }
        delay(200);
      }
    }
    if (key == '8') {
      alpha4.clear();
      alpha4.writeDisplay();
      tone(1, 600, 100);
      dis = 0;
      for (int c = 0; c <= 30; c++) {
        scroll[0] = scroll[1];
        scroll[1] = scroll[2];
        scroll[2] = scroll[3];
        scroll[3] = mainst[dis];
        alpha4.writeDigitAscii(3, scroll[3]);
        alpha4.writeDigitAscii(2, scroll[2]);
        alpha4.writeDigitAscii(1, scroll[1]);
        alpha4.writeDigitAscii(0, scroll[0]);
        alpha4.writeDisplay();
        dis++;
        if (c == 30) {
          delay(200);
          alpha4.clear();
          alpha4.writeDisplay();
        }
        delay(200);
      }
    }
    if (key == '9') {
      alpha4.clear();
      alpha4.writeDisplay();
      tone(1, 600, 100);
      dis = 0;
      for (int c = 0; c <= 16; c++) {
        scroll[0] = scroll[1];
        scroll[1] = scroll[2];
        scroll[2] = scroll[3];
        scroll[3] = wedgemererd[dis];
        alpha4.writeDigitAscii(3, scroll[3]);
        alpha4.writeDigitAscii(2, scroll[2]);
        alpha4.writeDigitAscii(1, scroll[1]);
        alpha4.writeDigitAscii(0, scroll[0]);
        alpha4.writeDisplay();
        dis++;
        if (c == 16) {
          delay(200);
          alpha4.clear();
          alpha4.writeDisplay();
        }
        delay(200);
      }
    }
    if (key == 'C') {
      alpha4.clear();
      alpha4.writeDisplay();
      tone(1, 600, 100);
      dis = 0;
      for (int c = 0; c <= 16; c++) {
        scroll[0] = scroll[1];
        scroll[1] = scroll[2];
        scroll[2] = scroll[3];
        scroll[3] = marstonst[dis];
        alpha4.writeDigitAscii(3, scroll[3]);
        alpha4.writeDigitAscii(2, scroll[2]);
        alpha4.writeDigitAscii(1, scroll[1]);
        alpha4.writeDigitAscii(0, scroll[0]);
        alpha4.writeDisplay();
        dis++;
        if (c == 16) {
          delay(200);
          alpha4.clear();
          alpha4.writeDisplay();
        }
        delay(200);
      }
    }
    if (key == '0') {
      alpha4.clear();
      alpha4.writeDisplay();
      tone(1, 600, 100);
      dis = 0;
      for (int c = 0; c <= 17; c++) {
        scroll[0] = scroll[1];
        scroll[1] = scroll[2];
        scroll[2] = scroll[3];
        scroll[3] = winthropst[dis];
        alpha4.writeDigitAscii(3, scroll[3]);
        alpha4.writeDigitAscii(2, scroll[2]);
        alpha4.writeDigitAscii(1, scroll[1]);
        alpha4.writeDigitAscii(0, scroll[0]);
        alpha4.writeDisplay();
        dis++;
        if (c == 17) {
          delay(200);
          alpha4.clear();
          alpha4.writeDisplay();
        }
        delay(200);
      }
    }
    if (key == 'F') {
      alpha4.clear();
      alpha4.writeDisplay();
      tone(1, 600, 100);
      dis = 0;
      for (int c = 0; c <= 21; c++) {
        scroll[0] = scroll[1];
        scroll[1] = scroll[2];
        scroll[2] = scroll[3];
        scroll[3] = winthrop[dis];
        alpha4.writeDigitAscii(3, scroll[3]);
        alpha4.writeDigitAscii(2, scroll[2]);
        alpha4.writeDigitAscii(1, scroll[1]);
        alpha4.writeDigitAscii(0, scroll[0]);
        alpha4.writeDisplay();
        dis++;
        if (c == 21) {
          delay(200);
          alpha4.clear();
          alpha4.writeDisplay();
        }
        delay(200);
      }
    }
    if (key == 'E') {
      alpha4.clear();
      alpha4.writeDisplay();
      tone(1, 600, 100);
      dis = 0;
      for (int c = 0; c <= 15; c++) {
        scroll[0] = scroll[1];
        scroll[1] = scroll[2];
        scroll[2] = scroll[3];
        scroll[3] = lawrencerd[dis];
        alpha4.writeDigitAscii(3, scroll[3]);
        alpha4.writeDigitAscii(2, scroll[2]);
        alpha4.writeDigitAscii(1, scroll[1]);
        alpha4.writeDigitAscii(0, scroll[0]);
        alpha4.writeDisplay();
        dis++;
        if (c == 15) {
          delay(200);
          alpha4.clear();
          alpha4.writeDisplay();
        }
        delay(200);
      }
    }
    if (key == 'D') {
      alpha4.clear();
      alpha4.writeDisplay();
      tone(1, 600, 100);
      dis = 0;
      for (int c = 0; c <= 15; c++) {
        scroll[0] = scroll[1];
        scroll[1] = scroll[2];
        scroll[2] = scroll[3];
        scroll[3] = woodsiderd[dis];
        alpha4.writeDigitAscii(3, scroll[3]);
        alpha4.writeDigitAscii(2, scroll[2]);
        alpha4.writeDigitAscii(1, scroll[1]);
        alpha4.writeDigitAscii(0, scroll[0]);
        alpha4.writeDisplay();
        dis++;
        if (c == 15) {
          delay(200);
          alpha4.clear();
          alpha4.writeDisplay();
        }
        delay(200);
      }
    }
  }
}

